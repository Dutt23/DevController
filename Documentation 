// Dependencies used

express mongoose passportpassport-jwt jsonwebtoken body-parser bcryptjs validator gravatar

gravatar : Used for avatars 

validate : used for validations and such. Kept in the validators file. Predefined is emoty only checks for strings. hence is-empty.js was made
If a field is left empty it will be sent as null or undefined. Validator only works with strings. Hence the is empty method , checks and then converts it into String for the checking part.

//
Use populate only while getting detail

CNTRL + SHIFT + R , shortcut for refactoring in visual 

npm i -g create-react-app

npm i -g npm // upgrade to latest version


create-react-app client // Creates client which will be used it is completely seperate

//To run both server and client concurrently 

sudo npm i concurrently // install it

rfc tab for making a function component

class = className

to install router react-router-dom

put exact otherwise it will show contents from multiple pages

//For redux

sudo npm i redux react-redux redux-thunk --save

redux-thunk is a middle used for ajax requests , async waits for thr request to come in first

createStore function
arguments 
reducer (Function): A reducing function that returns the next state tree, given the current state tree and an action to handle.

[preloadedState] (any): The initial state. You may optionally specify it to hydrate the state from the server in universal apps, or to restore a previously serialized user session. If you produced reducer with combineReducers, this must be a plain object with the same shape as the keys passed to it. Otherwise, you are free to pass anything that your reducer can understand.

[enhancer] (Function): The store enhancer. You may optionally specify it to enhance the store with third-party capabilities such as middleware, time travel, persistence, etc. The only store enhancer that ships with Redux is applyMiddleware().

Token has all the information required. We can get everything from there. jwt decode module is used to decide the information

If you props always map state to props. Always bring in prop-types to map

Reducers look for the type:GET_ERRORS.
THat type of action triggers the reducer